<?php
/**
 * Module file for Gen Person
 */

function gen_person_form_alter(&$form, &$form_state, $form_id) {
    //dsm($form_id);
}
/**
 * Implements hook_form_FORM_ID_alter().
 */
function gen_person_form_person_node_form_alter(&$form, &$form_state, $form_id) {
    array_unshift($form['#validate'], 'gen_person_form_person_node_form_validate');
    //$form['#validate'][0] = 'gen_person_form_person_node_form_validate';
    //$form['#validate'][1] = 'node_form_validate';
    //dsm($form);
}

/**
 * form validate callback added to person_node_form
 */
function gen_person_form_person_node_form_validate(&$form, &$form_state) {
    if(is_null($form_state['values']['nid'])) { //node is new
        $result = db_select('gen_person_idx', 'i')
            ->fields('i', array('surname', 'given', 'idx', 'id', 'created'))
            ->condition('surname', $form_state['values']['field_person_surname'][LANGUAGE_NONE][0]['value'], '=')
            ->condition('given', $form_state['values']['field_person_given_name'][LANGUAGE_NONE][0]['value'], '=')
            ->orderBy('created', 'DESC')
            ->range(0,1)
            ->execute()
            ->fetchAll();
        if(empty($result)) {
            $newIdx = new stdClass;
            $newIdx->surname = $form_state['values']['field_person_surname'][LANGUAGE_NONE][0]['value'];
            $newIdx->given = $form_state['values']['field_person_given_name'][LANGUAGE_NONE][0]['value'];
            $newIdx->idx = 1;
            $id = db_insert('gen_person_idx')
                ->fields(array(
                'surname' => $newIdx->surname,
                'given' => $newIdx->given,
                'idx' => $newIdx->idx,
                'created' => REQUEST_TIME,
            ))
            ->execute();
            $form_state['values']['field_gen_person_idx'][LANGUAGE_NONE][0]['value'] = $id;
            $form_state['values']['field_gen_person_idx2'][LANGUAGE_NONE][0]['value'] = $newIdx->idx;
        } else {
            $newIdx = $result[0];
            $newIdx->idx++;
            unset($newIdx->id);
            $id = db_insert('gen_person_idx')
                ->fields(array(
                'surname' => $newIdx->surname,
                'given' => $newIdx->given,
                'idx' => $newIdx->idx,
                'created' => REQUEST_TIME,
            ))
            ->execute();
            $form_state['values']['field_gen_person_idx'][LANGUAGE_NONE][0]['value'] = $id;
            $form_state['values']['field_gen_person_idx2'][LANGUAGE_NONE][0]['value'] = $newIdx->idx;
        }
    } else { // node exists       
        $idno = (int) $form_state['values']['field_gen_person_idx'][LANGUAGE_NONE][0]['value'];
        $result = db_select('gen_person_idx', 'i')
            ->fields('i', array('surname', 'given', 'idx', 'id', 'created'))
            ->condition('id', $idno, "=")
            ->execute()
            ->fetchAll();
        $idx = clone $result[0];
        if (!((trim($form_state['values']['field_person_surname'][LANGUAGE_NONE][0]['value']) == trim($idx->surname)) &&
           (trim($form_state['values']['field_person_given_name'][LANGUAGE_NONE][0]['value']) == trim($idx->given)) &&
           ((int) $form_state['values']['field_gen_person_idx2'][LANGUAGE_NONE][0]['value'] == $idx->idx))) {
            $result = db_select('gen_person_idx', 'i')
                ->fields('i', array('surname', 'given', 'idx', 'id', 'created'))
                ->condition('surname', $form_state['values']['field_person_surname'][LANGUAGE_NONE][0]['value'], '=')
                ->condition('given', $form_state['values']['field_person_given_name'][LANGUAGE_NONE][0]['value'], '=')
                ->orderBy('created', 'DESC')
                ->range(0,1)
                ->execute()
                ->fetchAll();
            if(empty($result)) {
                $idx->surname = $form_state['values']['field_person_surname'][LANGUAGE_NONE][0]['value'];
                $idx->given = $form_state['values']['field_person_given_name'][LANGUAGE_NONE][0]['value'];
                $idx->idx = 1;
                unset($idx->id);
                $id = db_insert('gen_person_idx')
                    ->fields(array(
                    'surname' => $idx->surname,
                    'given' => $idx->given,
                    'idx' => $idx->idx,
                    'created' => REQUEST_TIME,
                ))
                ->execute();
                $form_state['values']['field_gen_person_idx2'][LANGUAGE_NONE][0]['value'] = $idx->idx;
                $form_state['values']['field_gen_person_idx'][LANGUAGE_NONE][0]['value'] = $id;
            } else {
                $newIdx = clone $result[0];
                $newIdx->idx++;
                $idx->surname = $newIdx->surname;
                $idx->given = $newIdx->given;
                $idx->created = REQUEST_TIME;
                $idx->idx = $newIdx->idx;
                unset($idx->id);
                $id = db_insert('gen_person_idx')
                    ->fields(array(
                        'surname' => $newIdx->surname,
                        'given' => $newIdx->given,
                        'idx' => $newIdx->idx,
                        'created' => REQUEST_TIME,
                ))
                ->execute();
                $form_state['values']['field_gen_person_idx2'][LANGUAGE_NONE][0]['value'] = $newIdx->idx;
                $form_state['values']['field_gen_person_idx'][LANGUAGE_NONE][0]['value'] = $id;
            }
        }
    }
}

/**
 * Implements hook_theme().
 */
function gen_person_theme($existing, $type, $theme, $path) {
    return array(
        'node__person' => array(
            'render element' => 'content',
            'template' => 'node--person',
            'base hook' => 'node',
            'path' => drupal_get_path('module', 'gen_person') . '/templates',
        )
    );
}
/**
 * Implements hook_preprocess_node().
 */
function gen_person_preprocess_node(&$variables) {
    
    global $user;
    if($variables['type'] == 'person') {
        $nameoutput = null;
        $surname = field_get_items('node', $variables['node'], 'field_person_surname');
        $namesuffixes = field_get_items('node', $variables['node'], 'field_person_name_suffix');
        $nameprefixes = field_get_items('node', $variables['node'], 'field_person_name_prefix');
        $givenname = field_get_items('node', $variables['node'], 'field_person_given_name');
        $born = field_get_items('node', $variables['node'], 'field_person_born');
        $birthplace = field_get_items('node', $variables['node'], 'field_person_birthplace');
        $died = field_get_items('node', $variables['node'], 'field_person_died');
        $deathplace = field_get_items('node', $variables['node'], 'field_person_deathplace');
        
        
        $nameoutput = null;
        $surnameoutput = field_view_value('node', $variables['node'], 'field_person_surname', $surname[0]);
        if($surnameoutput) {
            $nameoutput .= $surnameoutput['#markup'];
        }
        $namesuffixoutput = NULL;
        if($namesuffixes) {
            foreach($namesuffixes as $key => $namesuffix) {
                $ns = field_view_value('node', $variables['node'], 'field_person_name_suffix', $namesuffixes[$key]);
                if(!$namesuffixoutput) {
                    $namesuffixoutput .= $ns['#title'];
                } else {
                    $namesuffixoutput .= ", " . $ns['#title'];
                }
            }
        }
        
        if(!$namesuffixoutput) {
            $nameoutput .= ", ";
        } else {
            $nameoutput .= " " . $namesuffixoutput;
        }
        
        $nameprefixoutput = null;
        if($nameprefixes) {
            foreach($nameprefixes as $key => $namesuffix) {
                $ns = field_view_value('node', $variables['node'], 'field_person_name_suffix', $nameprefixes[$key]);
                if(!$nameprefixoutput) {
                    $nameprefixoutput .= $ns['#title'];
                } else {
                    $nameprefixoutput .= " " . $ns['#title'];
                }
            }
            if($nameprefixoutput) {
                $nameoutput .= ", " . $nameprefixoutput . " ";
            }
        }
        
        $givennameoutput = field_view_value('node', $variables['node'], 'field_person_given_name', $givenname[0]);
        
        if($givennameoutput) {
            $nameoutput .= $givennameoutput['#markup'];
        }
        
        $genderoutput = null;        
        $genderinfo = field_get_items('node', $variables['node'], 'field_person_gender');
        $genderoutputraw = field_view_value('node', $variables['node'], 'field_person_gender', $genderinfo[0]);

        if($genderoutputraw['#title'] == 'Female') {
            $genderoutput = '<i class="fa fa-venus" title="' . t("Female") . '"></i>';
        } elseif ($genderoutputraw['#title'] == 'Male') {
            $genderoutput = '<i class="fa fa-mars" title="' . t("Male") . '"></i>';
        } else {
            $genderoutput = '<i class="fa fa-circle-thin" title="' . t("Unknown Gender") . '"></i>';
        }

        $variables['name'] = array(
            '#markup' => '<div class="field field-name-field-person-name field-type-text field-label-inline clearfix">' .
            '<div class="field-label">' .
            t('Name') . ":&nbsp;" .
            '</div><div class="field-items"><div class="field-item even">' .
                $nameoutput .
                '</div></div> ' .
                $genderoutput . '</div>',
            '#raw' => $nameoutput,
        );        

        unset($variables['field_person_surname']);
        unset($variables['field_person_given_name']);
        unset($variables['field_person_name_prefix']);
        unset($variables['field_person_name_suffix']);
        unset($variables['field_person_gender']);
        
        unset($variables['content']['field_person_surname']);
        unset($variables['content']['field_person_given_name']);
        unset($variables['content']['field_person_name_prefix']);
        unset($variables['content']['field_person_name_suffix']);
        unset($variables['content']['field_person_gender']);
    }    
}
